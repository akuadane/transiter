syntax = "proto3";
option go_package = "github.com/jamespfennell/transiter/api";

import "google/api/annotations.proto";

/**
*
* 
* ## Resource model

The Transiter public API is based around hierarchal resources, like many REST APIs.
This is the resource hierarchy:

```
System
  |- Agency
  |- Alert
  |- Feed
  |   |- Feed update
  |- Route
  |   |- Trip
  |       |- Vehicle with no ID
  |- Stop
  |- Transfer
  |- Vehicle with ID
```

For each of resource there is a proto message type, a list endpoint, and a get endpoints.
For stops, the message is [Stop], the list endpoint is [ListStops], and the get endpoint is [GetStop].

In the HTTP API, the hierarchy is represented in the URL; thus:

- List all systems has URL `/systems`,
- Get system with ID `<system_id>`` has URL `/systems/<system_id>`,
- List all routes in the system has URL `/systems/<system_id>/routes`,
- Get route has URL `/systems/<system_id>/routes/<route_id>`,

and so on.

Many resources refer to other resources across the hierarchy.
For example, each route has an agency it is attached to.
Each stop has a list of service maps, each of which contains a set of routes.
In these situations the resource message contains a _preview_ of the other resource.
The [Route] message contains an agency preview, in the form of an [Agency.Preview]
  message.
These preview messages contain at least enough information to uniquely identify the resource.
However they also contain additional information that is considered generally useful;
  thus, the [Stop.Preview] message contains the stop's name.
What counts as "considered generally" is obviously very subjective and open to change.

The following table summarizes all of the resources and their types.
The right-most column describes the source_of the resource.
The public API is a read-only API so all of the resources come from somewhere else.

| Resource    | Parent resource | Proto type | Proto preview type | Source
+-------------+-----------------+-----------
| Agency      | System          | [Agency]   | [Agency.Preview] | GTFS static    
| Alert       | System          | [Alert]    | [Alert.Preview] | GTFS realtime 
| System      | None            |         | system config
| Feed        | System          |       | system config  
| Feed update | Feed            | | Transiter update process             
| Route       | System          |        | GTFS static
| Trip        | Route           |   | GTFS realtime      
| Stop        | System          |       | GTFS static   
| Transfer    | System          |        | GTFS static       
| Vehicle     | System or trip  |        | GTFS realtime     
+--------
*/
service Public {
  rpc Entrypoint (EntrypointRequest) returns (EntrypointReply) {
    option (google.api.http) = {
            get: "/"
        };
  }

  rpc ListSystems (ListSystemsRequest) returns (ListSystemsReply) {
    option (google.api.http) = {
            get: "/systems"
        };
  }
  
  rpc GetSystem (GetSystemRequest) returns (System) {
    option (google.api.http) = {
            get: "/systems/{system_id}"
        };
  }

  rpc ListAgencies (ListAgenciesRequest) returns (ListAgenciesReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/agencies"
        };
  }

  rpc GetAgency (GetAgencyRequest) returns (Agency) {
    option (google.api.http) = {
            get: "/systems/{system_id}/agencies/{agency_id}"
        };
  }

  rpc ListStops (ListStopsRequest) returns (ListStopsReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/stops"
        };
  }

  rpc GetStop (GetStopRequest) returns (Stop) {
    option (google.api.http) = {
            get: "/systems/{system_id}/stops/{stop_id}"
        };
  }

  rpc ListRoutes (ListRoutesRequest) returns (ListRoutesReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/routes"
        };
  }

  rpc GetRoute (GetRouteRequest) returns (Route) {
    option (google.api.http) = {
            get: "/systems/{system_id}/routes/{route_id}"
        };
  }

  rpc ListTrips (ListTripsRequest) returns (ListTripsReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/routes/{route_id}/trips"
        };
  }

  rpc GetTrip (GetTripRequest) returns (Trip) {
    option (google.api.http) = {
            get: "/systems/{system_id}/routes/{route_id}/trips/{trip_id}"
        };
  }

  rpc ListAlerts (ListAlertsRequest) returns (ListAlertsReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/alerts"
        };
  }

  rpc GetAlert (GetAlertRequest) returns (Alert) {
    option (google.api.http) = {
            get: "/systems/{system_id}/alerts/{alert_id}"
        };
  }

  rpc ListFeeds (ListFeedsRequest) returns (ListFeedsReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/feeds"
        };
  }

  rpc GetFeed (GetFeedRequest) returns (Feed) {
    option (google.api.http) = {
            get: "/systems/{system_id}/feeds/{feed_id}"
        };
  }

  rpc ListFeedUpdates (ListFeedUpdatesRequest) returns (ListFeedUpdatesReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/feeds/{feed_id}/updates"
        };
  }

  rpc ListTransfers (ListTransfersRequest) returns (ListTransfersReply) {
    option (google.api.http) = {
            get: "/systems/{system_id}/transfers"
        };
  }

  // TODO: ListAlerts, GetAlert, ListAlertsForRoutes (?), ListAlertsForRoute (?)
  // or add a general endpoint with search criteria? Can just filter on alert IDs
}

message EntrypointRequest {}

message EntrypointReply {

  message TransiterDetails {
    string version = 1;
    string href = 2;
    
    message Build {
      string number = 3;
      string built_at = 4;
      string built_at_timestamp = 5;
      string git_commit_hash = 6;
      string href = 7;
    }
    optional Build build = 3;
  }
  TransiterDetails transiter = 1;
  
  repeated System.Preview systems = 2;
}

message ListSystemsRequest {}

message ListSystemsReply {
  repeated System systems = 1;
}

message GetSystemRequest {
  string system_id = 1;
}

message ListAgenciesRequest {
  string system_id = 1;
}

message ListAgenciesReply {
  repeated Agency agencies = 1;
}

message GetAgencyRequest {
  string system_id = 1;
  string agency_id = 2;
}

message ListStopsRequest {
  string system_id = 1;
}

message ListStopsReply {
  // TODO: full Stop instead of preview
  repeated Stop.Preview stops = 1;
}

message GetStopRequest {
  string system_id = 1;
  string stop_id = 2;
}

message ListRoutesRequest {
  string system_id = 1;
}

message ListRoutesReply {
  // TODO: full Route instead of preview
  repeated RoutePreviewWithAlerts routes = 1;
}

message GetRouteRequest {
  string system_id = 1;
  string route_id = 2;
}

message ListTripsRequest {
  string system_id = 1;
  string route_id = 2;
}

message ListTripsReply {
  // TODO: full Trip instead of preview
  repeated Trip.Preview trips = 1;
}

message ListAlertsRequest {
  string system_id = 1;
}

message ListAlertsReply {
  repeated Alert alerts = 1;
}

message GetAlertRequest {
  string system_id = 1;
  string alert_id = 2;
}

message GetTripRequest {
  string system_id = 1;
  string route_id = 2;
  string trip_id = 3;
}

message ListFeedsRequest {
  string system_id = 1;
}

message ListFeedsReply {
  // TODO: full Feed instead of preview
  repeated Feed.Preview feeds = 1;
}

message ListFeedUpdatesRequest {
  string system_id = 1;
  string feed_id = 2;
}

message ListFeedUpdatesReply {
  repeated FeedUpdate updates = 1;
}

message GetFeedRequest {
  string system_id = 1;
  string feed_id = 2;
}

message ListTransfersRequest {
  string system_id = 1;
}

message ListTransfersReply {
  repeated Transfer transfers = 1;
}

message System {
  string id = 1;
  string name = 2;

  enum Status {
    UNKNOWN = 0;
    INSTALLING = 1;
    ACTIVE = 2;
    INSTALL_FAILED = 3;
    UPDATING = 4;
    UPDATE_FAILED = 5;
    DELETING = 6;
  }
  Status status = 3;

  message ChildEntities {
    int64 count = 1;
    optional string href = 2;
  }
  optional ChildEntities agencies = 4;
  optional ChildEntities feeds = 5;
  optional ChildEntities routes = 6;
  optional ChildEntities stops = 7;
  optional ChildEntities transfers = 8;
  
  optional string href = 9;

  // Preview contains preview information about the system.
  message Preview {
    string id = 2;
    optional string href = 1;
  }
}

message Stop {
  string id = 1;

  optional string name = 2;

  optional double longitude = 3;
  optional double latitude = 4;
  optional string url = 5;

  repeated string stop_headsigns = 7;

  optional Stop.Preview parent_stop = 13;
  repeated Stop.Preview child_stops = 14;

  message ServiceMap {
    string config_id = 1;
    repeated Route.Preview routes = 2;
  }
  repeated ServiceMap service_maps = 8;

  repeated Alert.Preview alerts = 15;

  message StopTime {
    EstimatedTime arrival = 1;
    EstimatedTime departure = 2;
    bool future = 4;
    int32 stop_sequence = 5;
    optional string headsign = 6;
    optional string track = 3;
    Trip.Preview trip = 7;
  }
  repeated StopTime stop_times = 6;

  repeated Transfer transfers = 16;

  // Preview contains preview information about the stop.
  message Preview {
    string id = 1;
    string name = 2;
    // TODO: transfers and service maps
    optional string href = 7;
  }
}

message Trip {
  string id = 1;
  // TODO(APIv2): remove route?
  Route.Preview route = 2;
  Stop.Preview last_stop = 3;
  optional int64 started_at = 4;
  optional Vehicle.Preview vehicle = 6;
  bool direction_id = 7;

  message StopTime {
    EstimatedTime arrival = 1;
    EstimatedTime departure = 2;
    bool future = 4;
    int32 stop_sequence = 5;
    optional string headsign = 6;
    optional string track = 3;
    Stop.Preview stop = 7;
  }
  repeated StopTime stop_times = 9;
  optional string href = 10;

  // Preview contains preview information about the trip.
  message Preview {
    string id = 1;
    Route.Preview route = 2;
    Stop.Preview last_stop = 3;
    optional int64 started_at = 10;
    optional Vehicle.Preview vehicle = 6;
    bool direction_id = 4;
    optional string href = 5;
  }
}

message Vehicle {
  // Preview contains preview information about the vehice.
  message Preview {
    string id = 1;
  }
}

// TODO remove and add a routes/alerts endpoint
message RoutePreviewWithAlerts {
  string id = 1;
  // TODO(APIv2): remove?
  string color = 2;
  repeated Alert.Preview alerts = 3;
  optional string href = 4;
}

message Route {
  string id = 1;
  optional string short_name = 2;
  optional string long_name = 3;
  string color = 4;
  string text_color = 5;
  optional string description = 6;
  optional string url = 7;
  optional int32 sort_order = 13;
  // TODO: make these enums
  string continuous_pickup = 14;
  string continuous_drop_off = 15;

  // TODO: make this an enum
  string type = 8;

  // An estimate of the interval of time between consecutive trains, in seconds.
  optional int32 estimated_headway = 9;

  Agency.Preview agency = 10;

  message ServiceMap {
    string config_id = 1;
    repeated Stop.Preview stops = 2;
  }
  repeated ServiceMap service_maps = 11;

  repeated Alert.Preview alerts = 12;

  // Preview contains preview information about the route.
  message Preview {
    string id = 1;
    // TODO(APIv2): remove? or add text_color?
    string color = 2;
    // Will be populated only if the system is not obvious
    optional System system = 8;
    optional string href = 3;
  }
}

message Feed {
  string id = 1;
  bool periodic_update_enabled = 2;
  optional string periodic_update_period = 3;

  message Updates {
    optional string href = 1;
  }
  optional Updates updates = 4;

  // Preview contains preview information about the feed.
  message Preview {
    string id = 1;
    bool periodic_update_enabled = 2;
    optional string periodic_update_period = 3;
    optional string href = 4;
  }
}

message Agency {
  string id = 1;
  string name = 2;
  string url = 3;
  string timezone = 4;
  optional string language = 5;
  optional string phone = 6;
  optional string fare_url = 7;
  optional string email = 8;

  repeated Route.Preview routes = 9;
  repeated Alert.Preview alerts = 10;
  optional string href = 11;

  // Preview contains preview information about the agency.
  message Preview {
    string id = 1;
    string name = 2;
    optional string href = 3;
  }
}

// TODO; alphabetize the messages
message Alert {
  string id = 1;

  // Cause is the same as the alert cause in the GTFS realtime spec, except UNKNOWN_CAUSE has
  // value 0 to satisfy proto3 requirements.
  enum Cause {
    UNKNOWN_CAUSE = 0;
    OTHER_CAUSE = 2;
    TECHNICAL_PROBLEM = 3;
    STRIKE = 4;
    DEMONSTRATION = 5; 
    ACCIDENT = 6;
    HOLIDAY = 7;
    WEATHER = 8;
    MAINTENANCE = 9;
    CONSTRUCTION = 10;
    POLICE_ACTIVITY = 11;
    MEDICAL_EMERGENCY = 12;
  }
  Cause cause = 2;

  // Effect is the same as the alert effect in the GTFS realtime spec, except UNKNOWN_EFFECT has
  // value 0 to satisfy proto3 requirements.
  enum Effect {
    UNKNOWN_EFFECT = 0;
    NO_SERVICE = 1;
    REDUCED_SERVICE = 2;
    SIGNIFICANT_DELAYS = 3;
    DETOUR = 4;
    ADDITIONAL_SERVICE = 5;
    MODIFIED_SERVICE = 6;
    OTHER_EFFECT = 7;
    STOP_MOVED = 9;
    NO_EFFECT = 10;
    ACCESSIBILITY_ISSUE = 11;
  }
  Effect effect = 3;

  message ActivePeriod {
    optional int64 starts_at = 1;
    optional int64 ends_at = 2;
  }
  optional ActivePeriod current_active_period = 4;
  repeated ActivePeriod all_active_periods = 8;

  message Text {
    string text = 1;
    string language = 2;
  }
  repeated Text header = 5;
  repeated Text description = 6;
  repeated Text url = 7;

  // TODO: informed entites

  message Preview {
    string id = 1;
    Cause cause = 2;
    Effect effect = 3;
    // TODO(APIv2): add this field and create API endpoints
    // optional string href = 3;
  }
}

message EstimatedTime {
  optional int64 time = 1;
  optional int32 delay = 2;
  optional int32 uncertainty = 3;
}

message Transfer {
  Stop.Preview from_stop = 1;
  Stop.Preview to_stop = 2;

  enum Type {
    RECOMMENDED = 0;
	  TIMED = 1;
	  REQUIRES_TIME = 2;
	  NO_POSSIBLE = 3;
  }
  Type type = 3;

  optional int32 min_transfer_time = 4;
  optional int32 distance = 5;
}

message FeedUpdate {
    string id = 1;
    // TODO: make these enums
    string type = 2;
    string status = 3;
    optional string result = 4;
    optional string stack_trace = 5;
    optional string content_hash = 6;
    optional int32 content_length = 7;
    optional int64 completed_at = 8;
}
