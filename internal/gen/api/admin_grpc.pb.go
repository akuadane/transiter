// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransiterAdminClient is the client API for TransiterAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransiterAdminClient interface {
	GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfig, error)
	InstallOrUpdateSystem(ctx context.Context, in *InstallOrUpdateSystemRequest, opts ...grpc.CallOption) (*InstallOrUpdateSystemReply, error)
	DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemReply, error)
	UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedReply, error)
	GetSchedulerStatus(ctx context.Context, in *GetSchedulerStatusRequest, opts ...grpc.CallOption) (*GetSchedulerStatusReply, error)
	ResetScheduler(ctx context.Context, in *ResetSchedulerRequest, opts ...grpc.CallOption) (*ResetSchedulerReply, error)
}

type transiterAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewTransiterAdminClient(cc grpc.ClientConnInterface) TransiterAdminClient {
	return &transiterAdminClient{cc}
}

func (c *transiterAdminClient) GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfig, error) {
	out := new(SystemConfig)
	err := c.cc.Invoke(ctx, "/TransiterAdmin/GetSystemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterAdminClient) InstallOrUpdateSystem(ctx context.Context, in *InstallOrUpdateSystemRequest, opts ...grpc.CallOption) (*InstallOrUpdateSystemReply, error) {
	out := new(InstallOrUpdateSystemReply)
	err := c.cc.Invoke(ctx, "/TransiterAdmin/InstallOrUpdateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterAdminClient) DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemReply, error) {
	out := new(DeleteSystemReply)
	err := c.cc.Invoke(ctx, "/TransiterAdmin/DeleteSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterAdminClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedReply, error) {
	out := new(UpdateFeedReply)
	err := c.cc.Invoke(ctx, "/TransiterAdmin/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterAdminClient) GetSchedulerStatus(ctx context.Context, in *GetSchedulerStatusRequest, opts ...grpc.CallOption) (*GetSchedulerStatusReply, error) {
	out := new(GetSchedulerStatusReply)
	err := c.cc.Invoke(ctx, "/TransiterAdmin/GetSchedulerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterAdminClient) ResetScheduler(ctx context.Context, in *ResetSchedulerRequest, opts ...grpc.CallOption) (*ResetSchedulerReply, error) {
	out := new(ResetSchedulerReply)
	err := c.cc.Invoke(ctx, "/TransiterAdmin/ResetScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransiterAdminServer is the server API for TransiterAdmin service.
// All implementations should embed UnimplementedTransiterAdminServer
// for forward compatibility
type TransiterAdminServer interface {
	GetSystemConfig(context.Context, *GetSystemConfigRequest) (*SystemConfig, error)
	InstallOrUpdateSystem(context.Context, *InstallOrUpdateSystemRequest) (*InstallOrUpdateSystemReply, error)
	DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemReply, error)
	UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedReply, error)
	GetSchedulerStatus(context.Context, *GetSchedulerStatusRequest) (*GetSchedulerStatusReply, error)
	ResetScheduler(context.Context, *ResetSchedulerRequest) (*ResetSchedulerReply, error)
}

// UnimplementedTransiterAdminServer should be embedded to have forward compatible implementations.
type UnimplementedTransiterAdminServer struct {
}

func (UnimplementedTransiterAdminServer) GetSystemConfig(context.Context, *GetSystemConfigRequest) (*SystemConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (UnimplementedTransiterAdminServer) InstallOrUpdateSystem(context.Context, *InstallOrUpdateSystemRequest) (*InstallOrUpdateSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallOrUpdateSystem not implemented")
}
func (UnimplementedTransiterAdminServer) DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystem not implemented")
}
func (UnimplementedTransiterAdminServer) UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedTransiterAdminServer) GetSchedulerStatus(context.Context, *GetSchedulerStatusRequest) (*GetSchedulerStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerStatus not implemented")
}
func (UnimplementedTransiterAdminServer) ResetScheduler(context.Context, *ResetSchedulerRequest) (*ResetSchedulerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetScheduler not implemented")
}

// UnsafeTransiterAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransiterAdminServer will
// result in compilation errors.
type UnsafeTransiterAdminServer interface {
	mustEmbedUnimplementedTransiterAdminServer()
}

func RegisterTransiterAdminServer(s grpc.ServiceRegistrar, srv TransiterAdminServer) {
	s.RegisterService(&TransiterAdmin_ServiceDesc, srv)
}

func _TransiterAdmin_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterAdminServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransiterAdmin/GetSystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterAdminServer).GetSystemConfig(ctx, req.(*GetSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransiterAdmin_InstallOrUpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallOrUpdateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterAdminServer).InstallOrUpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransiterAdmin/InstallOrUpdateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterAdminServer).InstallOrUpdateSystem(ctx, req.(*InstallOrUpdateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransiterAdmin_DeleteSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterAdminServer).DeleteSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransiterAdmin/DeleteSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterAdminServer).DeleteSystem(ctx, req.(*DeleteSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransiterAdmin_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterAdminServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransiterAdmin/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterAdminServer).UpdateFeed(ctx, req.(*UpdateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransiterAdmin_GetSchedulerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterAdminServer).GetSchedulerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransiterAdmin/GetSchedulerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterAdminServer).GetSchedulerStatus(ctx, req.(*GetSchedulerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransiterAdmin_ResetScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterAdminServer).ResetScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransiterAdmin/ResetScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterAdminServer).ResetScheduler(ctx, req.(*ResetSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransiterAdmin_ServiceDesc is the grpc.ServiceDesc for TransiterAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransiterAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransiterAdmin",
	HandlerType: (*TransiterAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemConfig",
			Handler:    _TransiterAdmin_GetSystemConfig_Handler,
		},
		{
			MethodName: "InstallOrUpdateSystem",
			Handler:    _TransiterAdmin_InstallOrUpdateSystem_Handler,
		},
		{
			MethodName: "DeleteSystem",
			Handler:    _TransiterAdmin_DeleteSystem_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _TransiterAdmin_UpdateFeed_Handler,
		},
		{
			MethodName: "GetSchedulerStatus",
			Handler:    _TransiterAdmin_GetSchedulerStatus_Handler,
		},
		{
			MethodName: "ResetScheduler",
			Handler:    _TransiterAdmin_ResetScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin.proto",
}
