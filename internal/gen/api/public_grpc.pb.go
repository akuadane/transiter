// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicClient is the client API for Public service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicClient interface {
	Entrypoint(ctx context.Context, in *EntrypointRequest, opts ...grpc.CallOption) (*EntrypointReply, error)
	ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsReply, error)
	GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*System, error)
	ListAgenciesInSystem(ctx context.Context, in *ListAgenciesInSystemRequest, opts ...grpc.CallOption) (*ListAgenciesInSystemReply, error)
	GetAgencyInSystem(ctx context.Context, in *GetAgencyInSystemRequest, opts ...grpc.CallOption) (*Agency, error)
	ListStopsInSystem(ctx context.Context, in *ListStopsInSystemRequest, opts ...grpc.CallOption) (*ListStopsInSystemReply, error)
	GetStopInSystem(ctx context.Context, in *GetStopInSystemRequest, opts ...grpc.CallOption) (*Stop, error)
	ListRoutesInSystem(ctx context.Context, in *ListRoutesInSystemRequest, opts ...grpc.CallOption) (*ListRoutesInSystemReply, error)
	GetRouteInSystem(ctx context.Context, in *GetRouteInSystemRequest, opts ...grpc.CallOption) (*Route, error)
	ListTripsInRoute(ctx context.Context, in *ListTripsInRouteRequest, opts ...grpc.CallOption) (*ListTripsInRouteReply, error)
	GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*Trip, error)
	ListFeedsInSystem(ctx context.Context, in *ListFeedsInSystemRequest, opts ...grpc.CallOption) (*ListFeedsInSystemReply, error)
	GetFeedInSystem(ctx context.Context, in *GetFeedInSystemRequest, opts ...grpc.CallOption) (*Feed, error)
	ListFeedUpdates(ctx context.Context, in *ListFeedUpdatesRequest, opts ...grpc.CallOption) (*ListFeedUpdatesReply, error)
	ListTransfersInSystem(ctx context.Context, in *ListTransfersInSystemRequest, opts ...grpc.CallOption) (*ListTransfersInSystemReply, error)
}

type publicClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicClient(cc grpc.ClientConnInterface) PublicClient {
	return &publicClient{cc}
}

func (c *publicClient) Entrypoint(ctx context.Context, in *EntrypointRequest, opts ...grpc.CallOption) (*EntrypointReply, error) {
	out := new(EntrypointReply)
	err := c.cc.Invoke(ctx, "/Public/Entrypoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsReply, error) {
	out := new(ListSystemsReply)
	err := c.cc.Invoke(ctx, "/Public/ListSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*System, error) {
	out := new(System)
	err := c.cc.Invoke(ctx, "/Public/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListAgenciesInSystem(ctx context.Context, in *ListAgenciesInSystemRequest, opts ...grpc.CallOption) (*ListAgenciesInSystemReply, error) {
	out := new(ListAgenciesInSystemReply)
	err := c.cc.Invoke(ctx, "/Public/ListAgenciesInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetAgencyInSystem(ctx context.Context, in *GetAgencyInSystemRequest, opts ...grpc.CallOption) (*Agency, error) {
	out := new(Agency)
	err := c.cc.Invoke(ctx, "/Public/GetAgencyInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListStopsInSystem(ctx context.Context, in *ListStopsInSystemRequest, opts ...grpc.CallOption) (*ListStopsInSystemReply, error) {
	out := new(ListStopsInSystemReply)
	err := c.cc.Invoke(ctx, "/Public/ListStopsInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetStopInSystem(ctx context.Context, in *GetStopInSystemRequest, opts ...grpc.CallOption) (*Stop, error) {
	out := new(Stop)
	err := c.cc.Invoke(ctx, "/Public/GetStopInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListRoutesInSystem(ctx context.Context, in *ListRoutesInSystemRequest, opts ...grpc.CallOption) (*ListRoutesInSystemReply, error) {
	out := new(ListRoutesInSystemReply)
	err := c.cc.Invoke(ctx, "/Public/ListRoutesInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetRouteInSystem(ctx context.Context, in *GetRouteInSystemRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/Public/GetRouteInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListTripsInRoute(ctx context.Context, in *ListTripsInRouteRequest, opts ...grpc.CallOption) (*ListTripsInRouteReply, error) {
	out := new(ListTripsInRouteReply)
	err := c.cc.Invoke(ctx, "/Public/ListTripsInRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*Trip, error) {
	out := new(Trip)
	err := c.cc.Invoke(ctx, "/Public/GetTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListFeedsInSystem(ctx context.Context, in *ListFeedsInSystemRequest, opts ...grpc.CallOption) (*ListFeedsInSystemReply, error) {
	out := new(ListFeedsInSystemReply)
	err := c.cc.Invoke(ctx, "/Public/ListFeedsInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) GetFeedInSystem(ctx context.Context, in *GetFeedInSystemRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/Public/GetFeedInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListFeedUpdates(ctx context.Context, in *ListFeedUpdatesRequest, opts ...grpc.CallOption) (*ListFeedUpdatesReply, error) {
	out := new(ListFeedUpdatesReply)
	err := c.cc.Invoke(ctx, "/Public/ListFeedUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ListTransfersInSystem(ctx context.Context, in *ListTransfersInSystemRequest, opts ...grpc.CallOption) (*ListTransfersInSystemReply, error) {
	out := new(ListTransfersInSystemReply)
	err := c.cc.Invoke(ctx, "/Public/ListTransfersInSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServer is the server API for Public service.
// All implementations must embed UnimplementedPublicServer
// for forward compatibility
type PublicServer interface {
	Entrypoint(context.Context, *EntrypointRequest) (*EntrypointReply, error)
	ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsReply, error)
	GetSystem(context.Context, *GetSystemRequest) (*System, error)
	ListAgenciesInSystem(context.Context, *ListAgenciesInSystemRequest) (*ListAgenciesInSystemReply, error)
	GetAgencyInSystem(context.Context, *GetAgencyInSystemRequest) (*Agency, error)
	ListStopsInSystem(context.Context, *ListStopsInSystemRequest) (*ListStopsInSystemReply, error)
	GetStopInSystem(context.Context, *GetStopInSystemRequest) (*Stop, error)
	ListRoutesInSystem(context.Context, *ListRoutesInSystemRequest) (*ListRoutesInSystemReply, error)
	GetRouteInSystem(context.Context, *GetRouteInSystemRequest) (*Route, error)
	ListTripsInRoute(context.Context, *ListTripsInRouteRequest) (*ListTripsInRouteReply, error)
	GetTrip(context.Context, *GetTripRequest) (*Trip, error)
	ListFeedsInSystem(context.Context, *ListFeedsInSystemRequest) (*ListFeedsInSystemReply, error)
	GetFeedInSystem(context.Context, *GetFeedInSystemRequest) (*Feed, error)
	ListFeedUpdates(context.Context, *ListFeedUpdatesRequest) (*ListFeedUpdatesReply, error)
	ListTransfersInSystem(context.Context, *ListTransfersInSystemRequest) (*ListTransfersInSystemReply, error)
	mustEmbedUnimplementedPublicServer()
}

// UnimplementedPublicServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServer struct {
}

func (UnimplementedPublicServer) Entrypoint(context.Context, *EntrypointRequest) (*EntrypointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entrypoint not implemented")
}
func (UnimplementedPublicServer) ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystems not implemented")
}
func (UnimplementedPublicServer) GetSystem(context.Context, *GetSystemRequest) (*System, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedPublicServer) ListAgenciesInSystem(context.Context, *ListAgenciesInSystemRequest) (*ListAgenciesInSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgenciesInSystem not implemented")
}
func (UnimplementedPublicServer) GetAgencyInSystem(context.Context, *GetAgencyInSystemRequest) (*Agency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgencyInSystem not implemented")
}
func (UnimplementedPublicServer) ListStopsInSystem(context.Context, *ListStopsInSystemRequest) (*ListStopsInSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStopsInSystem not implemented")
}
func (UnimplementedPublicServer) GetStopInSystem(context.Context, *GetStopInSystemRequest) (*Stop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStopInSystem not implemented")
}
func (UnimplementedPublicServer) ListRoutesInSystem(context.Context, *ListRoutesInSystemRequest) (*ListRoutesInSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutesInSystem not implemented")
}
func (UnimplementedPublicServer) GetRouteInSystem(context.Context, *GetRouteInSystemRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteInSystem not implemented")
}
func (UnimplementedPublicServer) ListTripsInRoute(context.Context, *ListTripsInRouteRequest) (*ListTripsInRouteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTripsInRoute not implemented")
}
func (UnimplementedPublicServer) GetTrip(context.Context, *GetTripRequest) (*Trip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrip not implemented")
}
func (UnimplementedPublicServer) ListFeedsInSystem(context.Context, *ListFeedsInSystemRequest) (*ListFeedsInSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedsInSystem not implemented")
}
func (UnimplementedPublicServer) GetFeedInSystem(context.Context, *GetFeedInSystemRequest) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedInSystem not implemented")
}
func (UnimplementedPublicServer) ListFeedUpdates(context.Context, *ListFeedUpdatesRequest) (*ListFeedUpdatesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedUpdates not implemented")
}
func (UnimplementedPublicServer) ListTransfersInSystem(context.Context, *ListTransfersInSystemRequest) (*ListTransfersInSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfersInSystem not implemented")
}
func (UnimplementedPublicServer) mustEmbedUnimplementedPublicServer() {}

// UnsafePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServer will
// result in compilation errors.
type UnsafePublicServer interface {
	mustEmbedUnimplementedPublicServer()
}

func RegisterPublicServer(s grpc.ServiceRegistrar, srv PublicServer) {
	s.RegisterService(&Public_ServiceDesc, srv)
}

func _Public_Entrypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntrypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).Entrypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/Entrypoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).Entrypoint(ctx, req.(*EntrypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListSystems(ctx, req.(*ListSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetSystem(ctx, req.(*GetSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListAgenciesInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgenciesInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListAgenciesInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListAgenciesInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListAgenciesInSystem(ctx, req.(*ListAgenciesInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetAgencyInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgencyInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetAgencyInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/GetAgencyInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetAgencyInSystem(ctx, req.(*GetAgencyInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListStopsInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStopsInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListStopsInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListStopsInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListStopsInSystem(ctx, req.(*ListStopsInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetStopInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStopInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetStopInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/GetStopInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetStopInSystem(ctx, req.(*GetStopInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListRoutesInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListRoutesInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListRoutesInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListRoutesInSystem(ctx, req.(*ListRoutesInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetRouteInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetRouteInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/GetRouteInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetRouteInSystem(ctx, req.(*GetRouteInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListTripsInRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTripsInRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListTripsInRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListTripsInRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListTripsInRoute(ctx, req.(*ListTripsInRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/GetTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetTrip(ctx, req.(*GetTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListFeedsInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedsInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListFeedsInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListFeedsInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListFeedsInSystem(ctx, req.(*ListFeedsInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_GetFeedInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).GetFeedInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/GetFeedInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).GetFeedInSystem(ctx, req.(*GetFeedInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListFeedUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListFeedUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListFeedUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListFeedUpdates(ctx, req.(*ListFeedUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ListTransfersInSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersInSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ListTransfersInSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/ListTransfersInSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ListTransfersInSystem(ctx, req.(*ListTransfersInSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Public_ServiceDesc is the grpc.ServiceDesc for Public service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Public_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Public",
	HandlerType: (*PublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Entrypoint",
			Handler:    _Public_Entrypoint_Handler,
		},
		{
			MethodName: "ListSystems",
			Handler:    _Public_ListSystems_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _Public_GetSystem_Handler,
		},
		{
			MethodName: "ListAgenciesInSystem",
			Handler:    _Public_ListAgenciesInSystem_Handler,
		},
		{
			MethodName: "GetAgencyInSystem",
			Handler:    _Public_GetAgencyInSystem_Handler,
		},
		{
			MethodName: "ListStopsInSystem",
			Handler:    _Public_ListStopsInSystem_Handler,
		},
		{
			MethodName: "GetStopInSystem",
			Handler:    _Public_GetStopInSystem_Handler,
		},
		{
			MethodName: "ListRoutesInSystem",
			Handler:    _Public_ListRoutesInSystem_Handler,
		},
		{
			MethodName: "GetRouteInSystem",
			Handler:    _Public_GetRouteInSystem_Handler,
		},
		{
			MethodName: "ListTripsInRoute",
			Handler:    _Public_ListTripsInRoute_Handler,
		},
		{
			MethodName: "GetTrip",
			Handler:    _Public_GetTrip_Handler,
		},
		{
			MethodName: "ListFeedsInSystem",
			Handler:    _Public_ListFeedsInSystem_Handler,
		},
		{
			MethodName: "GetFeedInSystem",
			Handler:    _Public_GetFeedInSystem_Handler,
		},
		{
			MethodName: "ListFeedUpdates",
			Handler:    _Public_ListFeedUpdates_Handler,
		},
		{
			MethodName: "ListTransfersInSystem",
			Handler:    _Public_ListTransfersInSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/public.proto",
}
