// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransiterClient is the client API for Transiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransiterClient interface {
	Entrypoint(ctx context.Context, in *EntrypointRequest, opts ...grpc.CallOption) (*EntrypointReply, error)
	ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsReply, error)
	GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemReply, error)
}

type transiterClient struct {
	cc grpc.ClientConnInterface
}

func NewTransiterClient(cc grpc.ClientConnInterface) TransiterClient {
	return &transiterClient{cc}
}

func (c *transiterClient) Entrypoint(ctx context.Context, in *EntrypointRequest, opts ...grpc.CallOption) (*EntrypointReply, error) {
	out := new(EntrypointReply)
	err := c.cc.Invoke(ctx, "/Transiter/Entrypoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterClient) ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsReply, error) {
	out := new(ListSystemsReply)
	err := c.cc.Invoke(ctx, "/Transiter/ListSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transiterClient) GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemReply, error) {
	out := new(GetSystemReply)
	err := c.cc.Invoke(ctx, "/Transiter/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransiterServer is the server API for Transiter service.
// All implementations must embed UnimplementedTransiterServer
// for forward compatibility
type TransiterServer interface {
	Entrypoint(context.Context, *EntrypointRequest) (*EntrypointReply, error)
	ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsReply, error)
	GetSystem(context.Context, *GetSystemRequest) (*GetSystemReply, error)
	mustEmbedUnimplementedTransiterServer()
}

// UnimplementedTransiterServer must be embedded to have forward compatible implementations.
type UnimplementedTransiterServer struct {
}

func (UnimplementedTransiterServer) Entrypoint(context.Context, *EntrypointRequest) (*EntrypointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entrypoint not implemented")
}
func (UnimplementedTransiterServer) ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystems not implemented")
}
func (UnimplementedTransiterServer) GetSystem(context.Context, *GetSystemRequest) (*GetSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedTransiterServer) mustEmbedUnimplementedTransiterServer() {}

// UnsafeTransiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransiterServer will
// result in compilation errors.
type UnsafeTransiterServer interface {
	mustEmbedUnimplementedTransiterServer()
}

func RegisterTransiterServer(s grpc.ServiceRegistrar, srv TransiterServer) {
	s.RegisterService(&Transiter_ServiceDesc, srv)
}

func _Transiter_Entrypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntrypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterServer).Entrypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transiter/Entrypoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterServer).Entrypoint(ctx, req.(*EntrypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transiter_ListSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterServer).ListSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transiter/ListSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterServer).ListSystems(ctx, req.(*ListSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transiter_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransiterServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transiter/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransiterServer).GetSystem(ctx, req.(*GetSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transiter_ServiceDesc is the grpc.ServiceDesc for Transiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Transiter",
	HandlerType: (*TransiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Entrypoint",
			Handler:    _Transiter_Entrypoint_Handler,
		},
		{
			MethodName: "ListSystems",
			Handler:    _Transiter_ListSystems_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _Transiter_GetSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/transiter.proto",
}
