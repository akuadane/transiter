// Code generated by sqlc. DO NOT EDIT.
// source: agency_queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteAgency = `-- name: DeleteAgency :exec
DELETE FROM agency WHERE pk = $1
`

func (q *Queries) DeleteAgency(ctx context.Context, pk int32) error {
	_, err := q.db.ExecContext(ctx, deleteAgency, pk)
	return err
}

const insertAgency = `-- name: InsertAgency :exec
INSERT INTO agency
    (id, system_pk, source_pk, name, url, timezone, language, phone, fare_url, email)
VALUES
    ($1, $2, $3, $4, $5,
     $6, $7, $8, $9, $10)
`

type InsertAgencyParams struct {
	ID       string
	SystemPk int32
	SourcePk int32
	Name     string
	Url      string
	Timezone string
	Language sql.NullString
	Phone    sql.NullString
	FareUrl  sql.NullString
	Email    sql.NullString
}

func (q *Queries) InsertAgency(ctx context.Context, arg InsertAgencyParams) error {
	_, err := q.db.ExecContext(ctx, insertAgency,
		arg.ID,
		arg.SystemPk,
		arg.SourcePk,
		arg.Name,
		arg.Url,
		arg.Timezone,
		arg.Language,
		arg.Phone,
		arg.FareUrl,
		arg.Email,
	)
	return err
}

const mapAgencyPkToIdInSystem = `-- name: MapAgencyPkToIdInSystem :many
SELECT pk, id FROM agency WHERE system_pk = $1
`

type MapAgencyPkToIdInSystemRow struct {
	Pk int32
	ID string
}

func (q *Queries) MapAgencyPkToIdInSystem(ctx context.Context, systemPk int32) ([]MapAgencyPkToIdInSystemRow, error) {
	rows, err := q.db.QueryContext(ctx, mapAgencyPkToIdInSystem, systemPk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MapAgencyPkToIdInSystemRow
	for rows.Next() {
		var i MapAgencyPkToIdInSystemRow
		if err := rows.Scan(&i.Pk, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgency = `-- name: UpdateAgency :exec
UPDATE agency SET
    source_pk = $1,
    name = $2,
    url = $3,
    timezone = $4, 
    language = $5, 
    phone = $6, 
    fare_url = $7, 
    email = $8
WHERE
    pk = $9
`

type UpdateAgencyParams struct {
	SourcePk int32
	Name     string
	Url      string
	Timezone string
	Language sql.NullString
	Phone    sql.NullString
	FareUrl  sql.NullString
	Email    sql.NullString
	Pk       int32
}

func (q *Queries) UpdateAgency(ctx context.Context, arg UpdateAgencyParams) error {
	_, err := q.db.ExecContext(ctx, updateAgency,
		arg.SourcePk,
		arg.Name,
		arg.Url,
		arg.Timezone,
		arg.Language,
		arg.Phone,
		arg.FareUrl,
		arg.Email,
		arg.Pk,
	)
	return err
}
