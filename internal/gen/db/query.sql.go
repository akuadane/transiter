// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const countAgenciesInSystem = `-- name: CountAgenciesInSystem :one
SELECT COUNT(*) FROM agency WHERE system_pk = $1
`

func (q *Queries) CountAgenciesInSystem(ctx context.Context, systemPk int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAgenciesInSystem, systemPk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFeedsInSystem = `-- name: CountFeedsInSystem :one
SELECT COUNT(*) FROM feed WHERE system_pk = $1
`

func (q *Queries) CountFeedsInSystem(ctx context.Context, systemPk int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFeedsInSystem, systemPk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRoutesInSystem = `-- name: CountRoutesInSystem :one
SELECT COUNT(*) FROM route WHERE system_pk = $1
`

func (q *Queries) CountRoutesInSystem(ctx context.Context, systemPk int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoutesInSystem, systemPk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countStopsInSystem = `-- name: CountStopsInSystem :one
SELECT COUNT(*) FROM stop WHERE system_pk = $1
`

func (q *Queries) CountStopsInSystem(ctx context.Context, systemPk int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStopsInSystem, systemPk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSystems = `-- name: CountSystems :one
SELECT COUNT(*) FROM system
`

func (q *Queries) CountSystems(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSystems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTransfersInSystem = `-- name: CountTransfersInSystem :one
SELECT COUNT(*) FROM transfer WHERE system_pk = $1
`

func (q *Queries) CountTransfersInSystem(ctx context.Context, systemPk sql.NullInt32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTransfersInSystem, systemPk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSystem = `-- name: GetSystem :one
SELECT pk, id, name, timezone, auto_update_enabled, status FROM system
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSystem(ctx context.Context, id string) (System, error) {
	row := q.db.QueryRowContext(ctx, getSystem, id)
	var i System
	err := row.Scan(
		&i.Pk,
		&i.ID,
		&i.Name,
		&i.Timezone,
		&i.AutoUpdateEnabled,
		&i.Status,
	)
	return i, err
}

const listSystems = `-- name: ListSystems :many
SELECT pk, id, name, timezone, auto_update_enabled, status FROM system
`

func (q *Queries) ListSystems(ctx context.Context) ([]System, error) {
	rows, err := q.db.QueryContext(ctx, listSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []System
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.Pk,
			&i.ID,
			&i.Name,
			&i.Timezone,
			&i.AutoUpdateEnabled,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
