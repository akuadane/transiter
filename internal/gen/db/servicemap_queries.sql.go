// Code generated by sqlc. DO NOT EDIT.
// source: servicemap_queries.sql

package db

import (
	"context"
)

const deleteServiceMap = `-- name: DeleteServiceMap :exec
DELETE FROM service_map WHERE config_pk = $1 AND route_pk = $2
`

type DeleteServiceMapParams struct {
	ConfigPk int64
	RoutePk  int64
}

func (q *Queries) DeleteServiceMap(ctx context.Context, arg DeleteServiceMapParams) error {
	_, err := q.db.ExecContext(ctx, deleteServiceMap, arg.ConfigPk, arg.RoutePk)
	return err
}

const deleteServiceMapConfig = `-- name: DeleteServiceMapConfig :exec
DELETE FROM service_map_config WHERE pk = $1
`

func (q *Queries) DeleteServiceMapConfig(ctx context.Context, pk int64) error {
	_, err := q.db.ExecContext(ctx, deleteServiceMapConfig, pk)
	return err
}

const insertServiceMap = `-- name: InsertServiceMap :one
INSERT INTO service_map
    (config_pk, route_pk)
VALUES
    ($1, $2)
RETURNING pk
`

type InsertServiceMapParams struct {
	ConfigPk int64
	RoutePk  int64
}

func (q *Queries) InsertServiceMap(ctx context.Context, arg InsertServiceMapParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertServiceMap, arg.ConfigPk, arg.RoutePk)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

const insertServiceMapConfig = `-- name: InsertServiceMapConfig :exec
INSERT INTO service_map_config
    (id, system_pk, config, default_for_routes_at_stop, default_for_stops_in_route)
VALUES
    ($1, $2, $3,
     $4, $5)
`

type InsertServiceMapConfigParams struct {
	ID                     string
	SystemPk               int64
	Config                 []byte
	DefaultForRoutesAtStop bool
	DefaultForStopsInRoute bool
}

func (q *Queries) InsertServiceMapConfig(ctx context.Context, arg InsertServiceMapConfigParams) error {
	_, err := q.db.ExecContext(ctx, insertServiceMapConfig,
		arg.ID,
		arg.SystemPk,
		arg.Config,
		arg.DefaultForRoutesAtStop,
		arg.DefaultForStopsInRoute,
	)
	return err
}

const insertServiceMapStop = `-- name: InsertServiceMapStop :exec
INSERT INTO service_map_vertex
    (map_pk, stop_pk, position)
VALUES
    ($1, $2, $3)
`

type InsertServiceMapStopParams struct {
	MapPk    int64
	StopPk   int64
	Position int32
}

func (q *Queries) InsertServiceMapStop(ctx context.Context, arg InsertServiceMapStopParams) error {
	_, err := q.db.ExecContext(ctx, insertServiceMapStop, arg.MapPk, arg.StopPk, arg.Position)
	return err
}

const listServiceMapConfigsInSystem = `-- name: ListServiceMapConfigsInSystem :many
SELECT pk, id, system_pk, config, default_for_routes_at_stop, default_for_stops_in_route FROM service_map_config WHERE system_pk = $1 ORDER BY id
`

func (q *Queries) ListServiceMapConfigsInSystem(ctx context.Context, systemPk int64) ([]ServiceMapConfig, error) {
	rows, err := q.db.QueryContext(ctx, listServiceMapConfigsInSystem, systemPk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceMapConfig
	for rows.Next() {
		var i ServiceMapConfig
		if err := rows.Scan(
			&i.Pk,
			&i.ID,
			&i.SystemPk,
			&i.Config,
			&i.DefaultForRoutesAtStop,
			&i.DefaultForStopsInRoute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceMapConfig = `-- name: UpdateServiceMapConfig :exec
UPDATE service_map_config
SET config = $1, 
    default_for_routes_at_stop = $2, 
    default_for_stops_in_route = $3
WHERE pk = $4
`

type UpdateServiceMapConfigParams struct {
	Config                 []byte
	DefaultForRoutesAtStop bool
	DefaultForStopsInRoute bool
	Pk                     int64
}

func (q *Queries) UpdateServiceMapConfig(ctx context.Context, arg UpdateServiceMapConfigParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceMapConfig,
		arg.Config,
		arg.DefaultForRoutesAtStop,
		arg.DefaultForStopsInRoute,
		arg.Pk,
	)
	return err
}
