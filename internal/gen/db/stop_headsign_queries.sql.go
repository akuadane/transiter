// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: stop_headsign_queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteStopHeadsignRules = `-- name: DeleteStopHeadsignRules :exec
DELETE FROM stop_headsign_rule
USING feed_update
WHERE feed_update.pk = stop_headsign_rule.source_pk
AND feed_update.feed_pk = $1
`

func (q *Queries) DeleteStopHeadsignRules(ctx context.Context, sourcePk int64) error {
	_, err := q.db.Exec(ctx, deleteStopHeadsignRules, sourcePk)
	return err
}

const insertStopHeadSignRule = `-- name: InsertStopHeadSignRule :exec
INSERT INTO stop_headsign_rule
    (source_pk, priority, stop_pk, track, headsign)
VALUES
    ($1, $2, $3,
     $4, $5)
`

type InsertStopHeadSignRuleParams struct {
	SourcePk int64
	Priority int32
	StopPk   int64
	Track    sql.NullString
	Headsign string
}

func (q *Queries) InsertStopHeadSignRule(ctx context.Context, arg InsertStopHeadSignRuleParams) error {
	_, err := q.db.Exec(ctx, insertStopHeadSignRule,
		arg.SourcePk,
		arg.Priority,
		arg.StopPk,
		arg.Track,
		arg.Headsign,
	)
	return err
}

const listStopHeadsignRulesForStops = `-- name: ListStopHeadsignRulesForStops :many
SELECT pk, source_pk, priority, stop_pk, track, headsign FROM stop_headsign_rule
WHERE stop_pk = ANY($1::bigint[])
ORDER BY priority ASC
`

func (q *Queries) ListStopHeadsignRulesForStops(ctx context.Context, stopPks []int64) ([]StopHeadsignRule, error) {
	rows, err := q.db.Query(ctx, listStopHeadsignRulesForStops, stopPks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StopHeadsignRule
	for rows.Next() {
		var i StopHeadsignRule
		if err := rows.Scan(
			&i.Pk,
			&i.SourcePk,
			&i.Priority,
			&i.StopPk,
			&i.Track,
			&i.Headsign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
