// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transfer_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTransfers = `-- name: DeleteTransfers :exec
DELETE FROM transfer
WHERE transfer.feed_pk = $1
`

func (q *Queries) DeleteTransfers(ctx context.Context, feedPk int64) error {
	_, err := q.db.Exec(ctx, deleteTransfers, feedPk)
	return err
}

const insertTransfer = `-- name: InsertTransfer :exec
INSERT INTO transfer
    (system_pk, feed_pk, from_stop_pk, to_stop_pk,
     type, min_transfer_time, distance)
VALUES
    ($1, $2,
     $3, $4, $5,
     $6, NULL)
`

type InsertTransferParams struct {
	SystemPk        pgtype.Int8
	FeedPk          int64
	FromStopPk      int64
	ToStopPk        int64
	Type            string
	MinTransferTime pgtype.Int4
}

func (q *Queries) InsertTransfer(ctx context.Context, arg InsertTransferParams) error {
	_, err := q.db.Exec(ctx, insertTransfer,
		arg.SystemPk,
		arg.FeedPk,
		arg.FromStopPk,
		arg.ToStopPk,
		arg.Type,
		arg.MinTransferTime,
	)
	return err
}

const listTransfersFromStops = `-- name: ListTransfersFromStops :many
  SELECT transfer.pk, transfer.system_pk, transfer.from_stop_pk, transfer.to_stop_pk, transfer.type, transfer.min_transfer_time, transfer.distance, transfer.feed_pk
  FROM transfer
  WHERE transfer.from_stop_pk = ANY($1::bigint[])
`

func (q *Queries) ListTransfersFromStops(ctx context.Context, fromStopPks []int64) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersFromStops, fromStopPks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.Pk,
			&i.SystemPk,
			&i.FromStopPk,
			&i.ToStopPk,
			&i.Type,
			&i.MinTransferTime,
			&i.Distance,
			&i.FeedPk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersInSystem = `-- name: ListTransfersInSystem :many
SELECT
    transfer.pk, transfer.system_pk, transfer.from_stop_pk, transfer.to_stop_pk, transfer.type, transfer.min_transfer_time, transfer.distance, transfer.feed_pk,
    from_stop.id from_stop_id, from_stop.name from_stop_name, from_system.id from_system_id,
    to_stop.id to_stop_id, to_stop.name to_stop_name, to_system.id to_system_id
FROM transfer
    INNER JOIN stop from_stop ON from_stop.pk = transfer.from_stop_pk
    INNER JOIN system from_system ON from_stop.system_pk = from_system.pk
    INNER JOIN stop to_stop ON to_stop.pk = transfer.to_stop_pk
    INNER JOIN system to_system ON to_stop.system_pk = to_system.pk
WHERE transfer.system_pk = $1
ORDER BY transfer.pk
`

type ListTransfersInSystemRow struct {
	Pk              int64
	SystemPk        pgtype.Int8
	FromStopPk      int64
	ToStopPk        int64
	Type            string
	MinTransferTime pgtype.Int4
	Distance        pgtype.Int4
	FeedPk          int64
	FromStopID      string
	FromStopName    pgtype.Text
	FromSystemID    string
	ToStopID        string
	ToStopName      pgtype.Text
	ToSystemID      string
}

func (q *Queries) ListTransfersInSystem(ctx context.Context, systemPk pgtype.Int8) ([]ListTransfersInSystemRow, error) {
	rows, err := q.db.Query(ctx, listTransfersInSystem, systemPk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTransfersInSystemRow
	for rows.Next() {
		var i ListTransfersInSystemRow
		if err := rows.Scan(
			&i.Pk,
			&i.SystemPk,
			&i.FromStopPk,
			&i.ToStopPk,
			&i.Type,
			&i.MinTransferTime,
			&i.Distance,
			&i.FeedPk,
			&i.FromStopID,
			&i.FromStopName,
			&i.FromSystemID,
			&i.ToStopID,
			&i.ToStopName,
			&i.ToSystemID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
